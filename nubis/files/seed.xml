<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>%%NUBIS_GIT_REPO%%</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <org.jvnet.hudson.plugins.triggers.startup.HudsonStartupTrigger plugin="startup-trigger-plugin@2.8">
      <spec></spec>
      <quietPeriod>0</quietPeriod>
      <runOnChoice>ON_CONNECT</runOnChoice>
    </org.jvnet.hudson.plugins.triggers.startup.HudsonStartupTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H/15 * * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.68">
      <scriptText>@Grab(&apos;org.yaml:snakeyaml:1.17&apos;)
import org.yaml.snakeyaml.Yaml
Yaml parser = new Yaml()

def site_configuration_path = &quot;nubis/sites.yaml&quot;

def default_name = &quot;nubis-metadata NUBIS_CI_NAME&quot;.execute().text.trim()
def default_git_repo = &quot;nubis-metadata NUBIS_GIT_REPO&quot;.execute().text.trim()
def arena = &quot;nubis-metadata NUBIS_ARENA&quot;.execute().text.trim()
def artifact_bucket = &quot;nubis-metadata NUBIS_CI_BUCKET&quot;.execute().text.trim()
def artifact_region = &quot;nubis-region&quot;.execute().text.trim()

def sites

try {
  sites = parser.load(readFileFromWorkspace(site_configuration_path))
  println(&quot;Setting up multi-site project&quot;)
} catch(Exception ex) {
  println(&quot;Defaulting to single project ${default_name} because ${ex}&quot;);
  sites = [:]
  sites[default_name] = [:]
  sites[default_name][&apos;repo&apos;] = default_git_repo
}

sites.each {
   def site_name = it.key
   def site_config = it.value
   println(&quot;Site ${site_name} has repo at ${site_config[&apos;repo&apos;] }&quot;)

  freeStyleJob(&quot;${site_name}-deployment&quot;) {
    description(&quot;&quot;&quot;
    ##${site_name}
    #WARNING WARNING
    This is a deployment job that can impact production, **use with care**
    &quot;&quot;&quot;.stripIndent())

    parameters {
      stringParam(&apos;stack_name&apos;, site_name)
      stringParam(&apos;owner&apos;, &apos;infra-aws@mozilla.com&apos;)
      stringParam(&apos;service_name&apos;, site_name)
      stringParam(&apos;ami&apos;,&apos;&apos;)
      stringParam(&apos;key_name&apos;, &apos;nubis&apos;)
      stringParam(&apos;environment&apos;, &apos;stage&apos;)
      choiceParam(&apos;action&apos;, [&apos;apply&apos;,&apos;plan&apos;,&apos;destroy&apos;])
      choiceParam(&apos;region&apos;, [&apos;us-west-2&apos;,&apos;us-east-1&apos;])
    }

    wrappers {
        colorizeOutput()
        timestamps()
        credentialsBinding {
            string(&quot;NEWRELIC_API_KEY&quot;, &quot;NEWRELIC_API_KEY&quot;)
        }
        buildNameSetter {
          template(&apos;#${BUILD_NUMBER} - ${environment}/${action}&apos;)
          runAtStart(true)
          runAtEnd(true)
      }
    }

    steps {
      copyArtifacts(&quot;${site_name}-build&quot;) {
            //includePatterns(&apos;*.xml&apos;, &apos;*.properties&apos;)
            //excludePatterns(&apos;test.xml&apos;, &apos;test.properties&apos;)
            //targetDirectory(&apos;files&apos;)
            //flatten()
            //optional()
            buildSelector {
                upstreamBuild {
                  fallbackToLastSuccessful(true)
                }
            }
        }
      shell(&apos;&apos;&apos;
        nubis-ci-deploy $action
      &apos;&apos;&apos;.stripIndent())
    }

    scm {
      git{
            remote {
                name(&apos;origin&apos;)
                url(site_config[&apos;repo&apos;])
            }
            branch(&apos;master&apos;)
        extensions {
          cleanBeforeCheckout()
          submoduleOption {
            disableSubmodules(false)
            recursiveSubmodules(true)
            trackingSubmodules(false)
            parentCredentials(false)
            timeout(60)
            reference(&apos;&apos;)
          }
        }
      }
    }

    publishers {
          discardBuildPublisher {
		daysToKeep(&quot;30&quot;)
		intervalDaysToKeep(&quot;&quot;)
		numToKeep(&quot;250&quot;)
		intervalNumToKeep(&quot;&quot;)
		discardSuccess(false)
		discardUnstable(false)
		discardFailure(false)
		discardNotBuilt(false)
		discardAborted(false)
		minLogFileSize(&quot;&quot;)
		maxLogFileSize(&quot;&quot;)
		regexp(&quot;&quot;)
        }
        mailer(&apos;infra-aws@mozilla.com&apos;, true, true)
        slackNotifier {
          notifyAborted(true)
          notifyBackToNormal(true)
          notifyFailure(true)
          notifyNotBuilt(true)
          notifyRegression(true)
          notifyRepeatedFailure(true)
          notifySuccess(true)
          notifyUnstable(true)
          startNotification(true)
          customMessage(&apos;Environment:$environment&apos;)
          includeCustomMessage(true)
        }
        naginatorPublisher {
          rerunIfUnstable(false)
          maxSchedule(3)
          checkRegexp(true)
          rerunMatrixPart(false)
          regexpForRerun(&quot;This is a bug with Terraform and should be reported as a GitHub Issue&quot;)
          delay {
            fixedDelay {
              delay(60)
            }
           }
         }
     }
  }

  freeStyleJob(&quot;${site_name}-build&quot;) {
    description(&quot;${site_name}-build&quot;)

    wrappers {
        colorizeOutput()
        timestamps()
    }

    properties {
      copyArtifactPermissionProperty {
         projectNames(&quot;${site_name}-deployment&quot;)
      }

      promotions {
        promotion {
          name(&apos;Deployed&apos;)
          icon(&apos;star-gold&apos;)
            conditions {
                    downstream(false, &quot;${site_name}-deployment&quot;)
             }
        }
      }
    }

    scm {
      git{
            remote {
                name(&apos;origin&apos;)
                url(site_config[&apos;repo&apos;])
            }
            branch(&apos;master&apos;)
        extensions {
          cleanBeforeCheckout()
          submoduleOption {
            disableSubmodules(false)
            recursiveSubmodules(true)
            trackingSubmodules(false)
            parentCredentials(false)
            timeout(60)
            reference(&apos;&apos;)
          }
        }
      }
    }

    triggers {
        scm(&quot;H/15 * * * *&quot;)
    }

    steps {
      shell(&apos;&apos;&apos;
        nubis-ci-build
      &apos;&apos;&apos;.stripIndent())
    }

    publishers {
          discardBuildPublisher {
		daysToKeep(&quot;30&quot;)
		intervalDaysToKeep(&quot;&quot;)
		numToKeep(&quot;250&quot;)
		intervalNumToKeep(&quot;&quot;)
		discardSuccess(false)
		discardUnstable(false)
		discardFailure(false)
		discardNotBuilt(false)
		discardAborted(false)
		minLogFileSize(&quot;&quot;)
		maxLogFileSize(&quot;&quot;)
		regexp(&quot;&quot;)
        }

        archiveArtifacts(&apos;artifacts/**&apos;)

        s3Upload {
           profileName(&apos;nubis-ci&apos;)
           entries {
             entry {
               // Destination bucket.
               bucket(artifact_bucket + &apos;/artifacts&apos; )
               // Files to be uploaded.
               sourceFile(&apos;artifacts/**&apos;)
               excludedFile(&apos;&apos;)
               storageClass(null)
               // Region location of the Bucket.
               selectedRegion(artifact_region)
               // If Enabled, the artifacts won&apos;t be published if the build failed.
               noUploadOnFailure(true)
               // Upload directly from the slave, instead of proxying the upload to the master.
               uploadFromSlave(false)
               // When enabled, this lets Jenkins fully manage the artifacts, exactly like it does when the artifacts are published to the master.
               managedArtifacts(true)
               // Use S3 AES-256 server side encryption support.
               useServerSideEncryption(false)
               // When enabled, Jenkins will ignore the directory structure of the artifacts in the source project and copy all matching artifacts directly into the specified bucket.
               flatten(false)
               // When enabled, files will be compressed with GZIP and &quot;Content-Encoding&quot; header will be set to &quot;gzip&quot;.
               gzipFiles(true)
               // By default, artifacts will be cleaned up as part of job history rotation policy.
               keepForever(false)
               // If option is enabled, content of artifact would be displayed directly in browser.
               showDirectlyInBrowser(false)
             }
           }

           // When disabled, only publish to S3 after completion of concurrent builds to prevent overriding published artifact.
           dontWaitForConcurrentBuildCompletion(false)
           // Allows filtering log messages by level of severity: INFO, WARNING and SEVERE.
           consoleLogLevel(&apos;INFO&apos;)
           pluginFailureResultConstraint(&apos;FAILURE&apos;)
        }
        downstreamParameterized {
            trigger(&quot;${site_name}-deployment&quot;) {
                condition(&apos;UNSTABLE_OR_BETTER&apos;)
                parameters {
                    triggerWithNoParameters()
                }

            }
        }
        mailer(&apos;infra-aws@mozilla.com&apos;, true, true)
        slackNotifier {
          notifyAborted(true)
          notifyBackToNormal(true)
          notifyFailure(true)
          notifyNotBuilt(true)
          notifyRegression(true)
          notifyRepeatedFailure(true)
          notifySuccess(true)
          notifyUnstable(true)
          startNotification(true)
        }
    }
  }
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>DELETE</removedJobAction>
      <removedViewAction>DELETE</removedViewAction>
      <removedConfigFilesAction>DELETE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
